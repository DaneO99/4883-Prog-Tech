Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        // Create a vector of pairs to store numbers and their original indices
        vector<pair<int, int>> num_with_index;
        for (int i = 0; i < nums.size(); i++) {
            num_with_index.push_back({nums[i], i});
        }

        // Sort the vector based on the number values
        sort(num_with_index.begin(), num_with_index.end());

        int left = 0;
        int right = nums.size() - 1;

        while (left < right) {
            int sum = num_with_index[left].first + num_with_index[right].first;

            if (sum == target) {
                // Return the original indices of the numbers
                return {num_with_index[left].second, num_with_index[right].second};
            } else if (sum < target) {
                left++;
            } else {
                right--;
            }
        }
        return {}; // Return empty vector if no solution is found
    }
};
